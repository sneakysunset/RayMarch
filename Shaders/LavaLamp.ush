#pragma once

#include "/Engine/Public/Platform.ush"
#include "/Engine/Private/Common.ush"
#include "RayMarchingLibrary.ush"

struct RayMarchRenderer
{
	//Inputs
	float3 RayStart;
	float3 RayDir;
	float RayEpsilon;
	float3 Color;
	float Time;

	//Outputs
	float3 Normal;
	
	void Init(float3 InRayStart, float3 InRayDir, float InRayEpsilon, float InTime)
	{
		RayStart = InRayStart;
		RayDir = InRayDir;
		RayEpsilon = InRayEpsilon;
		Time = InTime;
	}

	
	float DistanceSampling()
	{
		float CurrentDistance = 0;
		for(int i = 0; i < 128; i++)
		{
			float3 Position = RayStart + RayDir * CurrentDistance;
			float Distance = SDF::GetScene(Position, Time);
			CurrentDistance += Distance;
			Normal = GetNormal(Position);
			if(Distance < RayEpsilon)
			{
				return 1;
			}
		}
		return 0;
	}

	float3 GetNormal(float3 Pos)
	{
		return normalize(float3(
		SDF::GetScene(Pos + float3(0.1f, 0, 0), Time) - SDF::GetScene(Pos - float3(0.1f, 0, 0), Time)
		,SDF::GetScene(Pos + float3(0, 0.1f, 0), Time)- SDF::GetScene(Pos - float3(0, 0.1f, 0), Time)
		,SDF::GetScene(Pos + float3(0, 0, 0.1f), Time)- SDF::GetScene(Pos - float3(0, 0, 0.1f), Time)));
	}
	
	/*float StepSampling()
	{
		float MinDistance = MAX_FLT;
		float RaySpeed = 1.0f;

		for(int i = 0; i < 2048; i++)
		{
			float3 Position = RayStart + RayDir * i * RaySpeed;

			float Distance = SDF::Sphere(Position, Radius * 2.0f);
			MinDistance = min(MinDistance, Distance);
		}
		return MinDistance;
	}*/

};